version: "3.8"

services:

  # ===================== DATABASES =====================

  mysql-order:
    image: mysql:8.0
    container_name: mysql-order
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: order_service
    ports:
      - "3307:3306"
    volumes:
      - ./mysql_order:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-pmysql"]
      interval: 10s
      retries: 3
      timeout: 5s

  mysql-inventory:
    image: mysql:8.0
    container_name: mysql-inventory
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: inventory_service
    ports:
      - "3308:3306"
    volumes:
      - ./mysql_inventory:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-pmysql"]
      interval: 10s
      retries: 3
      timeout: 5s

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db

  # ===================== KAFKA STACK =====================

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_4LW_COMMANDS_WHITELIST: ruok

  broker:
    image: confluentinc/cp-kafka:7.2.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # ===================== OBSERVABILITY =====================

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
    volumes:
      - ./grafana_data:/var/lib/grafana

  # ===================== AUTHENTICATION =====================

  keycloak-mysql:
    image: mysql:8.0
    container_name: keycloak-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  # ===================== SPRING BOOT SERVICES =====================

  discovery-server:
    build:
      context: .
      dockerfile: discovery-server/Dockerfile
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8181:8080"
    environment:
      SERVER_PORT: 8080
      EUREKA_SERVER_URL: http://discovery-server:8761/eureka
      EUREKA_WEB_URI: http://discovery-server:8761
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
      KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/spring-boot-microservices-realm
    depends_on:
      - discovery-server
      - zipkin
      - keycloak

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/product-service
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SERVER_PORT: 8080
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
    depends_on:
      - mongo
      - discovery-server
      - zipkin
      - api-gateway

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-order:3306/order_service?allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: mysql
      SERVER_PORT: 8081
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
      SPRING_KAFKA_BOOTSTRAPSERVERS: broker:29092
    depends_on:
      - mysql-order
      - broker
      - discovery-server
      - zipkin
      - api-gateway

  inventory-service:
    build:
      context: .
      dockerfile: inventory-service/Dockerfile
    container_name: inventory-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-inventory:3306/inventory_service?allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: mysql
      SERVER_PORT: 8082
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
    depends_on:
      - mysql-inventory
      - discovery-server
      - zipkin
      - api-gateway

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    environment:
      SERVER_PORT: 8083
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      ZIPKIN_URL: http://zipkin:9411/api/v2/spans
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092
      KAFKA_TOPIC: notificationTopic
      KAFKA_CONSUMER_GROUP_ID: notificationId
    depends_on:
      - broker
      - discovery-server
      - zipkin
      - api-gateway
